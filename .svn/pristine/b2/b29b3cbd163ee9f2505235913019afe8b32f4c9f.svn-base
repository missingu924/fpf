package com.inspur.ftpparserframework.ftp;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.inspur.ftpparserframework.Main;
import com.inspur.ftpparserframework.ftp.obj.FtpServer;
import com.inspur.ftpparserframework.util.Constant;

/**
 * FTP线程监控器。若某FTP线程吊起超过5分钟，则重启该FTP线程。
 * 
 * @author 武玉刚
 * 
 */
public class FtpThreadTimeoutChecker extends Thread
{
	private Logger log = Logger.getLogger(this.getClass());
	private List<FtpThread> ftpThreads = new ArrayList<FtpThread>();
	private long ftpTimeOut = Constant.DEVAULT_FTP_TIME_OUT; // ftp线程单个动作默认超时时间
	private int scanInterval = 60;// ftp线程默认检查时间间隔：60 秒

	private final Object lock = new Object();// 同步锁

	public FtpThreadTimeoutChecker(long ftpTimeOut)
	{
		this.ftpTimeOut = ftpTimeOut;
	}

	@Override
	public void run()
	{
		try
		{
			while (true)
			{
				synchronized (lock)
				{
					for (int i = 0; i < ftpThreads.size(); i++)
					{
						FtpThread f = ftpThreads.get(i);

						long interval = System.currentTimeMillis() - f.getStartTime().getTime();
						if (interval > ftpTimeOut * 1000l)
						{
							log.info("FTP线程超时重启(超时时间为" + ftpTimeOut + "秒)，对应FTP服务器为：" + f.getFtpServer().getName());

							// 新启动一个线程
							FtpThread ftp = new FtpThread(f.getFtpServer(), f.getInterval(), f.getFileLastModifyTime(),
									f.getMode());
							ftp.start();

							// 加入监控
							this.ftpThreads.set(i, ftp);

							// 老线程超时停止
							f.stop();
							f = null;
						} else
						{
							log
									.info("FTP线程运行中，本次已运行" + (interval / 1000) + "秒，对应FTP服务器为："
											+ f.getFtpServer().getName());
						}
					}
				}

				sleep(scanInterval * 1000l);
			}
		} catch (Exception e)
		{
			log.error(e.getMessage(), e);
		}
	}

	public void check(FtpThread t)
	{
		synchronized (lock)
		{
			ftpThreads.add(t);
		}
	}

	public void check(FtpServer ftpServer)
	{
		synchronized (lock)
		{
			int i = 0;
			for (i = 0; i < ftpThreads.size(); i++)
			{
				FtpThread f = ftpThreads.get(i);
				if (f.getName().equals(ftpServer.getName()))
				{
					log.info("ftp服务器" + ftpServer.getName() + "线程已经存在，替换成新的配置...");
					// 新启动一个线程
					FtpThread ftp = new FtpThread(ftpServer, f.getInterval(), f.getFileLastModifyTime(), f.getMode());
					ftp.start();
					// 加入监控
					this.ftpThreads.set(i, ftp);
					// 老线程停止
					f.stop();
					f = null;
					break;
				}
			}
			if (i == ftpThreads.size())
			{
				log.info("新增ftp服务器" + ftpServer.getName() + "线程");
				// 新启动一个线程
				FtpThread ftp = new FtpThread(ftpServer, Main.ftpScanInterval, Main.ftpFileLastModifyTime,
						Constant.FTP_DOWNLOAD); // 启动ftp采集线程
				ftp.start();
				// 加入监控
				this.ftpThreads.add(ftp);
			}
		}
	}

	public void delFtp(FtpServer ftpServer)
	{
		for (int i = 0; i < ftpThreads.size(); i++)
		{
			FtpThread f = ftpThreads.get(i);
			if (f.getName().equals(ftpServer.getName()))
			{
				log.info("停止ftp服务器" + ftpServer.getName() + "");
				this.ftpThreads.remove(i);
				f.stop();
				f = null;
				break;
			}

		}
	}

	public static void main(String[] args)
	{
		FtpThreadTimeoutChecker checker = new FtpThreadTimeoutChecker(1800);
		for (int i = 0; i < 1; i++)
		{
			FtpServer server = new FtpServer();
			server.setName("test");
			server.setIp("10.18.1.26");
			server.setPort(21);
			server.setUser("nwom");
			server.setPassword("nwom123");
			server.setDir("/home/nwom/user/wuyg");

			FtpThread ftp = new FtpThread(server, 10, 3600, Constant.FTP_DOWNLOAD);
			ftp.start();

			checker.check(ftp);
		}
		checker.start();
	}
}
